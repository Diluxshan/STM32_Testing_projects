
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800407c  0800407c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040cc  080040cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040cc  080040cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040d4  080040d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d4  080040d4  000140d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040d8  080040d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  080040e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080040e8  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c85  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b2  00000000  00000000  00035cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00038678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  00039940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f64  00000000  00000000  0003aae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015671  00000000  00000000  00062a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f865d  00000000  00000000  000780b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e98  00000000  00000000  00170768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004064 	.word	0x08004064

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004064 	.word	0x08004064

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	4b3f      	ldr	r3, [pc, #252]	; (80005d4 <MX_GPIO_Init+0x114>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a3e      	ldr	r2, [pc, #248]	; (80005d4 <MX_GPIO_Init+0x114>)
 80004dc:	f043 0304 	orr.w	r3, r3, #4
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b3c      	ldr	r3, [pc, #240]	; (80005d4 <MX_GPIO_Init+0x114>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0304 	and.w	r3, r3, #4
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ee:	4b39      	ldr	r3, [pc, #228]	; (80005d4 <MX_GPIO_Init+0x114>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a38      	ldr	r2, [pc, #224]	; (80005d4 <MX_GPIO_Init+0x114>)
 80004f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <MX_GPIO_Init+0x114>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <MX_GPIO_Init+0x114>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a32      	ldr	r2, [pc, #200]	; (80005d4 <MX_GPIO_Init+0x114>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <MX_GPIO_Init+0x114>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <MX_GPIO_Init+0x114>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a2c      	ldr	r2, [pc, #176]	; (80005d4 <MX_GPIO_Init+0x114>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <MX_GPIO_Init+0x114>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2120      	movs	r1, #32
 800053a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053e:	f000 ff1d 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 8000542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000548:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <MX_GPIO_Init+0x118>)
 800054a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4619      	mov	r1, r3
 8000556:	4821      	ldr	r0, [pc, #132]	; (80005dc <MX_GPIO_Init+0x11c>)
 8000558:	f000 fd66 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800055c:	2320      	movs	r3, #32
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f000 fd57 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTI_Pin;
 800057a:	2310      	movs	r3, #16
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <MX_GPIO_Init+0x120>)
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI_GPIO_Port, &GPIO_InitStruct);
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4619      	mov	r1, r3
 800058c:	4813      	ldr	r0, [pc, #76]	; (80005dc <MX_GPIO_Init+0x11c>)
 800058e:	f000 fd4b 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000592:	23c0      	movs	r3, #192	; 0xc0
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <MX_GPIO_Init+0x11c>)
 80005a6:	f000 fd3f 	bl	8001028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	200a      	movs	r0, #10
 80005b0:	f000 fd03 	bl	8000fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80005b4:	200a      	movs	r0, #10
 80005b6:	f000 fd1c 	bl	8000ff2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	2028      	movs	r0, #40	; 0x28
 80005c0:	f000 fcfb 	bl	8000fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005c4:	2028      	movs	r0, #40	; 0x28
 80005c6:	f000 fd14 	bl	8000ff2 <HAL_NVIC_EnableIRQ>

}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	; 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	10310000 	.word	0x10310000
 80005dc:	48000800 	.word	0x48000800
 80005e0:	10110000 	.word	0x10110000

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fb6c 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f822 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f7ff ff66 	bl	80004c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 faca 	bl	8000b8c <MX_USART2_UART_Init>
  MX_RTC_Init();
 80005f8:	f000 f8b0 	bl	800075c <MX_RTC_Init>
  MX_SPI2_Init();
 80005fc:	f000 f936 	bl	800086c <MX_SPI2_Init>
  MX_TIM16_Init();
 8000600:	f000 fa78 	bl	8000af4 <MX_TIM16_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, (uint8_t*)"Hi\r\n", 2, 1000);
 8000604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000608:	2202      	movs	r2, #2
 800060a:	4907      	ldr	r1, [pc, #28]	; (8000628 <main+0x44>)
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <main+0x48>)
 800060e:	f003 f877 	bl	8003700 <HAL_UART_Transmit>
	  count += 1;
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <main+0x4c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <main+0x4c>)
 800061a:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1000);
 800061c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000620:	f000 fbcc 	bl	8000dbc <HAL_Delay>
	  HAL_UART_Transmit(&huart2, (uint8_t*)"Hi\r\n", 2, 1000);
 8000624:	e7ee      	b.n	8000604 <main+0x20>
 8000626:	bf00      	nop
 8000628:	0800407c 	.word	0x0800407c
 800062c:	2000002c 	.word	0x2000002c
 8000630:	20000028 	.word	0x20000028

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b0b8      	sub	sp, #224	; 0xe0
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800063e:	2244      	movs	r2, #68	; 0x44
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f003 fd06 	bl	8004054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000658:	463b      	mov	r3, r7
 800065a:	2288      	movs	r2, #136	; 0x88
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fcf8 	bl	8004054 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000664:	230a      	movs	r3, #10
 8000666:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2310      	movs	r3, #16
 8000674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000690:	230a      	movs	r3, #10
 8000692:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000696:	2307      	movs	r3, #7
 8000698:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 ff13 	bl	80014d8 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006b8:	f000 f84b 	bl	8000752 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2303      	movs	r3, #3
 80006c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006da:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006de:	2104      	movs	r1, #4
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fadf 	bl	8001ca4 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006ec:	f000 f831 	bl	8000752 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 80006f0:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 80006f4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fcd3 	bl	80020b0 <HAL_RCCEx_PeriphCLKConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000710:	f000 f81f 	bl	8000752 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000714:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000718:	f000 fe88 	bl	800142c <HAL_PWREx_ControlVoltageScaling>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000722:	f000 f816 	bl	8000752 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	37e0      	adds	r7, #224	; 0xe0
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PUSHBUTTON_Pin) HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000738:	88fb      	ldrh	r3, [r7, #6]
 800073a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800073e:	d104      	bne.n	800074a <HAL_GPIO_EXTI_Callback+0x1c>
 8000740:	2120      	movs	r1, #32
 8000742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000746:	f000 fe31 	bl	80013ac <HAL_GPIO_TogglePin>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000756:	b672      	cpsid	i
}
 8000758:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075a:	e7fe      	b.n	800075a <Error_Handler+0x8>

0800075c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000770:	2300      	movs	r3, #0
 8000772:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000774:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <MX_RTC_Init+0xc4>)
 8000776:	4a2b      	ldr	r2, [pc, #172]	; (8000824 <MX_RTC_Init+0xc8>)
 8000778:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800077a:	4b29      	ldr	r3, [pc, #164]	; (8000820 <MX_RTC_Init+0xc4>)
 800077c:	2200      	movs	r2, #0
 800077e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000780:	4b27      	ldr	r3, [pc, #156]	; (8000820 <MX_RTC_Init+0xc4>)
 8000782:	227f      	movs	r2, #127	; 0x7f
 8000784:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <MX_RTC_Init+0xc4>)
 8000788:	22ff      	movs	r2, #255	; 0xff
 800078a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800078c:	4b24      	ldr	r3, [pc, #144]	; (8000820 <MX_RTC_Init+0xc4>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000792:	4b23      	ldr	r3, [pc, #140]	; (8000820 <MX_RTC_Init+0xc4>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <MX_RTC_Init+0xc4>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_RTC_Init+0xc4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007a4:	481e      	ldr	r0, [pc, #120]	; (8000820 <MX_RTC_Init+0xc4>)
 80007a6:	f002 f93f 	bl	8002a28 <HAL_RTC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80007b0:	f7ff ffcf 	bl	8000752 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80007bc:	2300      	movs	r3, #0
 80007be:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2201      	movs	r2, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	4814      	ldr	r0, [pc, #80]	; (8000820 <MX_RTC_Init+0xc4>)
 80007d0:	f002 f9a5 	bl	8002b1e <HAL_RTC_SetTime>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80007da:	f7ff ffba 	bl	8000752 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007de:	2301      	movs	r3, #1
 80007e0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007e2:	2301      	movs	r3, #1
 80007e4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	2201      	movs	r2, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	480a      	ldr	r0, [pc, #40]	; (8000820 <MX_RTC_Init+0xc4>)
 80007f6:	f002 fa2f 	bl	8002c58 <HAL_RTC_SetDate>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000800:	f7ff ffa7 	bl	8000752 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_RTC_Init+0xc4>)
 800080a:	f002 fb63 	bl	8002ed4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8000814:	f7ff ff9d 	bl	8000752 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000b0 	.word	0x200000b0
 8000824:	40002800 	.word	0x40002800

08000828 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <HAL_RTC_MspInit+0x3c>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d10f      	bne.n	800085a <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <HAL_RTC_MspInit+0x40>)
 800083c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000840:	4a09      	ldr	r2, [pc, #36]	; (8000868 <HAL_RTC_MspInit+0x40>)
 8000842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2003      	movs	r0, #3
 8000850:	f000 fbb3 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000854:	2003      	movs	r0, #3
 8000856:	f000 fbcc 	bl	8000ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40002800 	.word	0x40002800
 8000868:	40021000 	.word	0x40021000

0800086c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_SPI2_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <MX_SPI2_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_SPI2_Init+0x74>)
 8000878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800087c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_SPI2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_SPI2_Init+0x74>)
 8000886:	f44f 7240 	mov.w	r2, #768	; 0x300
 800088a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_SPI2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_SPI2_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_SPI2_Init+0x74>)
 800089a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008ba:	2207      	movs	r2, #7
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008cc:	f002 fbc6 	bl	800305c <HAL_SPI_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f7ff ff3c 	bl	8000752 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000d4 	.word	0x200000d4
 80008e4:	40003800 	.word	0x40003800

080008e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a25      	ldr	r2, [pc, #148]	; (800099c <HAL_SPI_MspInit+0xb4>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d144      	bne.n	8000994 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <HAL_SPI_MspInit+0xb8>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	4a24      	ldr	r2, [pc, #144]	; (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6593      	str	r3, [r2, #88]	; 0x58
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a1e      	ldr	r2, [pc, #120]	; (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_SPI_MspInit+0xb8>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000952:	230c      	movs	r3, #12
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000962:	2305      	movs	r3, #5
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <HAL_SPI_MspInit+0xbc>)
 800096e:	f000 fb5b 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000984:	2305      	movs	r3, #5
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <HAL_SPI_MspInit+0xc0>)
 8000990:	f000 fb4a 	bl	8001028 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	; 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40003800 	.word	0x40003800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48000800 	.word	0x48000800
 80009a8:	48000400 	.word	0x48000400

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x44>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_MspInit+0x44>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6613      	str	r3, [r2, #96]	; 0x60
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_MspInit+0x44>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_MspInit+0x44>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x44>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6593      	str	r3, [r2, #88]	; 0x58
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x44>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 f99c 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <RTC_WKUP_IRQHandler+0x10>)
 8000a4e:	f002 fad5 	bl	8002ffc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000b0 	.word	0x200000b0

08000a5c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000a60:	2010      	movs	r0, #16
 8000a62:	f000 fcbd 	bl	80013e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a72:	f002 fbed 	bl	8003250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000138 	.word	0x20000138

08000a80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a88:	f000 fcaa 	bl	80013e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <SystemInit+0x5c>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a14      	ldr	r2, [pc, #80]	; (8000aec <SystemInit+0x5c>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <SystemInit+0x60>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <SystemInit+0x60>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <SystemInit+0x60>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <SystemInit+0x60>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <SystemInit+0x60>)
 8000abc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ac0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ac4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <SystemInit+0x60>)
 8000ac8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000acc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <SystemInit+0x60>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <SystemInit+0x60>)
 8000ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ad8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SystemInit+0x60>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00
 8000af0:	40021000 	.word	0x40021000

08000af4 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_TIM16_Init+0x44>)
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <MX_TIM16_Init+0x48>)
 8000afc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_TIM16_Init+0x44>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_TIM16_Init+0x44>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_TIM16_Init+0x44>)
 8000b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b10:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_TIM16_Init+0x44>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <MX_TIM16_Init+0x44>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_TIM16_Init+0x44>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_TIM16_Init+0x44>)
 8000b26:	f002 fb3c 	bl	80031a2 <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000b30:	f7ff fe0f 	bl	8000752 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000138 	.word	0x20000138
 8000b3c:	40014400 	.word	0x40014400

08000b40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <HAL_TIM_Base_MspInit+0x44>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d113      	bne.n	8000b7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <HAL_TIM_Base_MspInit+0x48>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <HAL_TIM_Base_MspInit+0x48>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_TIM_Base_MspInit+0x48>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2019      	movs	r0, #25
 8000b70:	f000 fa23 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b74:	2019      	movs	r0, #25
 8000b76:	f000 fa3c 	bl	8000ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40014400 	.word	0x40014400
 8000b88:	40021000 	.word	0x40021000

08000b8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <MX_USART2_UART_Init+0x5c>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bd0:	f002 fd48 	bl	8003664 <HAL_UART_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bda:	f7ff fdba 	bl	8000752 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000002c 	.word	0x2000002c
 8000be8:	40004400 	.word	0x40004400

08000bec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_UART_MspInit+0x7c>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d128      	bne.n	8000c60 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_UART_MspInit+0x80>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <HAL_UART_MspInit+0x80>)
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_UART_MspInit+0x80>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_UART_MspInit+0x80>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <HAL_UART_MspInit+0x80>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_UART_MspInit+0x80>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f000 f9e4 	bl	8001028 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	; 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40004400 	.word	0x40004400
 8000c6c:	40021000 	.word	0x40021000

08000c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c74:	f7ff ff0c 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c7a:	e003      	b.n	8000c84 <LoopCopyDataInit>

08000c7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c82:	3104      	adds	r1, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c84:	480a      	ldr	r0, [pc, #40]	; (8000cb0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c8c:	d3f6      	bcc.n	8000c7c <CopyDataInit>
	ldr	r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c90:	e002      	b.n	8000c98 <LoopFillZerobss>

08000c92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c94:	f842 3b04 	str.w	r3, [r2], #4

08000c98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <LoopForever+0x16>)
	cmp	r2, r3
 8000c9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c9c:	d3f9      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f003 f9b5 	bl	800400c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ca2:	f7ff fc9f 	bl	80005e4 <main>

08000ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca6:	e7fe      	b.n	8000ca6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000cac:	080040dc 	.word	0x080040dc
	ldr	r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cb4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000cb8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000cbc:	20000188 	.word	0x20000188

08000cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_2_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_Init+0x3c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <HAL_Init+0x3c>)
 8000cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cda:	2003      	movs	r0, #3
 8000cdc:	f000 f962 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f000 f80f 	bl	8000d04 <HAL_InitTick>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d002      	beq.n	8000cf2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	e001      	b.n	8000cf6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf2:	f7ff fe5b 	bl	80009ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40022000 	.word	0x40022000

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_InitTick+0x6c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d023      	beq.n	8000d60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <HAL_InitTick+0x70>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_InitTick+0x6c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f96d 	bl	800100e <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10f      	bne.n	8000d5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d809      	bhi.n	8000d54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d48:	f000 f937 	bl	8000fba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_InitTick+0x74>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e007      	b.n	8000d64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e004      	b.n	8000d64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e001      	b.n	8000d64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000004 	.word	0x20000004

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000184 	.word	0x20000184

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000184 	.word	0x20000184

08000dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f7ff ffee 	bl	8000da4 <HAL_GetTick>
 8000dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dd4:	d005      	beq.n	8000de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_Delay+0x44>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de2:	bf00      	nop
 8000de4:	f7ff ffde 	bl	8000da4 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d8f7      	bhi.n	8000de4 <HAL_Delay+0x28>
  {
  }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff29 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff3e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff8e 	bl	8000ef8 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff31 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffa2 	bl	8000f60 <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e17f      	b.n	8001338 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8171 	beq.w	8001332 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d00b      	beq.n	8001070 <HAL_GPIO_Init+0x48>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d007      	beq.n	8001070 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001064:	2b11      	cmp	r3, #17
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b12      	cmp	r3, #18
 800106e:	d130      	bne.n	80010d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010a6:	2201      	movs	r2, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	f003 0201 	and.w	r2, r3, #1
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d118      	bne.n	8001110 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010e4:	2201      	movs	r2, #1
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	08db      	lsrs	r3, r3, #3
 80010fa:	f003 0201 	and.w	r2, r3, #1
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x128>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b12      	cmp	r3, #18
 800114e:	d123      	bne.n	8001198 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	6939      	ldr	r1, [r7, #16]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0203 	and.w	r2, r3, #3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80ac 	beq.w	8001332 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4b5f      	ldr	r3, [pc, #380]	; (8001358 <HAL_GPIO_Init+0x330>)
 80011dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011de:	4a5e      	ldr	r2, [pc, #376]	; (8001358 <HAL_GPIO_Init+0x330>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6613      	str	r3, [r2, #96]	; 0x60
 80011e6:	4b5c      	ldr	r3, [pc, #368]	; (8001358 <HAL_GPIO_Init+0x330>)
 80011e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011f2:	4a5a      	ldr	r2, [pc, #360]	; (800135c <HAL_GPIO_Init+0x334>)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800121c:	d025      	beq.n	800126a <HAL_GPIO_Init+0x242>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4f      	ldr	r2, [pc, #316]	; (8001360 <HAL_GPIO_Init+0x338>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d01f      	beq.n	8001266 <HAL_GPIO_Init+0x23e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4e      	ldr	r2, [pc, #312]	; (8001364 <HAL_GPIO_Init+0x33c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x23a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4d      	ldr	r2, [pc, #308]	; (8001368 <HAL_GPIO_Init+0x340>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x236>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4c      	ldr	r2, [pc, #304]	; (800136c <HAL_GPIO_Init+0x344>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x232>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4b      	ldr	r2, [pc, #300]	; (8001370 <HAL_GPIO_Init+0x348>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x22e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4a      	ldr	r2, [pc, #296]	; (8001374 <HAL_GPIO_Init+0x34c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x22a>
 800124e:	2306      	movs	r3, #6
 8001250:	e00c      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001252:	2307      	movs	r3, #7
 8001254:	e00a      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001256:	2305      	movs	r3, #5
 8001258:	e008      	b.n	800126c <HAL_GPIO_Init+0x244>
 800125a:	2304      	movs	r3, #4
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x244>
 800125e:	2303      	movs	r3, #3
 8001260:	e004      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001262:	2302      	movs	r3, #2
 8001264:	e002      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x244>
 800126a:	2300      	movs	r3, #0
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	f002 0203 	and.w	r2, r2, #3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4093      	lsls	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800127c:	4937      	ldr	r1, [pc, #220]	; (800135c <HAL_GPIO_Init+0x334>)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <HAL_GPIO_Init+0x350>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ae:	4a32      	ldr	r2, [pc, #200]	; (8001378 <HAL_GPIO_Init+0x350>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012b4:	4b30      	ldr	r3, [pc, #192]	; (8001378 <HAL_GPIO_Init+0x350>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012d8:	4a27      	ldr	r2, [pc, #156]	; (8001378 <HAL_GPIO_Init+0x350>)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012de:	4b26      	ldr	r3, [pc, #152]	; (8001378 <HAL_GPIO_Init+0x350>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001302:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_GPIO_Init+0x350>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_GPIO_Init+0x350>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <HAL_GPIO_Init+0x350>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa22 f303 	lsr.w	r3, r2, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	f47f ae78 	bne.w	8001038 <HAL_GPIO_Init+0x10>
  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	48000400 	.word	0x48000400
 8001364:	48000800 	.word	0x48000800
 8001368:	48000c00 	.word	0x48000c00
 800136c:	48001000 	.word	0x48001000
 8001370:	48001400 	.word	0x48001400
 8001374:	48001800 	.word	0x48001800
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4013      	ands	r3, r2
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43d9      	mvns	r1, r3
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	400b      	ands	r3, r1
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f995 	bl	800072e <HAL_GPIO_EXTI_Callback>
  }
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40010400 	.word	0x40010400

08001410 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <HAL_PWREx_GetVoltageRange+0x18>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40007000 	.word	0x40007000

0800142c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800143a:	d130      	bne.n	800149e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001448:	d038      	beq.n	80014bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001452:	4a1e      	ldr	r2, [pc, #120]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001458:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2232      	movs	r2, #50	; 0x32
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	0c9b      	lsrs	r3, r3, #18
 800146c:	3301      	adds	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001470:	e002      	b.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3b01      	subs	r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001484:	d102      	bne.n	800148c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f2      	bne.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001498:	d110      	bne.n	80014bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e00f      	b.n	80014be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014aa:	d007      	beq.n	80014bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014b4:	4a05      	ldr	r2, [pc, #20]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40007000 	.word	0x40007000
 80014d0:	20000000 	.word	0x20000000
 80014d4:	431bde83 	.word	0x431bde83

080014d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e3d4      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ea:	4ba1      	ldr	r3, [pc, #644]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014f4:	4b9e      	ldr	r3, [pc, #632]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80e4 	beq.w	80016d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <HAL_RCC_OscConfig+0x4a>
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	2b0c      	cmp	r3, #12
 8001516:	f040 808b 	bne.w	8001630 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2b01      	cmp	r3, #1
 800151e:	f040 8087 	bne.w	8001630 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001522:	4b93      	ldr	r3, [pc, #588]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <HAL_RCC_OscConfig+0x62>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e3ac      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1a      	ldr	r2, [r3, #32]
 800153e:	4b8c      	ldr	r3, [pc, #560]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <HAL_RCC_OscConfig+0x7c>
 800154a:	4b89      	ldr	r3, [pc, #548]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001552:	e005      	b.n	8001560 <HAL_RCC_OscConfig+0x88>
 8001554:	4b86      	ldr	r3, [pc, #536]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001560:	4293      	cmp	r3, r2
 8001562:	d223      	bcs.n	80015ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fd41 	bl	8001ff0 <RCC_SetFlashLatencyFromMSIRange>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e38d      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001578:	4b7d      	ldr	r3, [pc, #500]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a7c      	ldr	r2, [pc, #496]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b7a      	ldr	r3, [pc, #488]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4977      	ldr	r1, [pc, #476]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001596:	4b76      	ldr	r3, [pc, #472]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	4972      	ldr	r1, [pc, #456]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
 80015aa:	e025      	b.n	80015f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ac:	4b70      	ldr	r3, [pc, #448]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a6f      	ldr	r2, [pc, #444]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b6d      	ldr	r3, [pc, #436]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	496a      	ldr	r1, [pc, #424]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ca:	4b69      	ldr	r3, [pc, #420]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	4965      	ldr	r1, [pc, #404]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fd01 	bl	8001ff0 <RCC_SetFlashLatencyFromMSIRange>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e34d      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015f8:	f000 fc36 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b5c      	ldr	r3, [pc, #368]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	495a      	ldr	r1, [pc, #360]	; (8001774 <HAL_RCC_OscConfig+0x29c>)
 800160a:	5ccb      	ldrb	r3, [r1, r3]
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	fa22 f303 	lsr.w	r3, r2, r3
 8001614:	4a58      	ldr	r2, [pc, #352]	; (8001778 <HAL_RCC_OscConfig+0x2a0>)
 8001616:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001618:	4b58      	ldr	r3, [pc, #352]	; (800177c <HAL_RCC_OscConfig+0x2a4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb71 	bl	8000d04 <HAL_InitTick>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d052      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	e331      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d032      	beq.n	800169e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001638:	4b4d      	ldr	r3, [pc, #308]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a4c      	ldr	r2, [pc, #304]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001644:	f7ff fbae 	bl	8000da4 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800164c:	f7ff fbaa 	bl	8000da4 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e31a      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800165e:	4b44      	ldr	r3, [pc, #272]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a40      	ldr	r2, [pc, #256]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b3e      	ldr	r3, [pc, #248]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	493b      	ldr	r1, [pc, #236]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001684:	4313      	orrs	r3, r2
 8001686:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001688:	4b39      	ldr	r3, [pc, #228]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	4936      	ldr	r1, [pc, #216]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
 800169c:	e01a      	b.n	80016d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800169e:	4b34      	ldr	r3, [pc, #208]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a33      	ldr	r2, [pc, #204]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016aa:	f7ff fb7b 	bl	8000da4 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b2:	f7ff fb77 	bl	8000da4 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e2e7      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f0      	bne.n	80016b2 <HAL_RCC_OscConfig+0x1da>
 80016d0:	e000      	b.n	80016d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d074      	beq.n	80017ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d005      	beq.n	80016f2 <HAL_RCC_OscConfig+0x21a>
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b0c      	cmp	r3, #12
 80016ea:	d10e      	bne.n	800170a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d10b      	bne.n	800170a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d064      	beq.n	80017c8 <HAL_RCC_OscConfig+0x2f0>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d160      	bne.n	80017c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e2c4      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001712:	d106      	bne.n	8001722 <HAL_RCC_OscConfig+0x24a>
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a15      	ldr	r2, [pc, #84]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 800171a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	e01d      	b.n	800175e <HAL_RCC_OscConfig+0x286>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800172a:	d10c      	bne.n	8001746 <HAL_RCC_OscConfig+0x26e>
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001732:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 800173e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e00b      	b.n	800175e <HAL_RCC_OscConfig+0x286>
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 800174c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a06      	ldr	r2, [pc, #24]	; (8001770 <HAL_RCC_OscConfig+0x298>)
 8001758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d01c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7ff fb1d 	bl	8000da4 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176c:	e011      	b.n	8001792 <HAL_RCC_OscConfig+0x2ba>
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	08004084 	.word	0x08004084
 8001778:	20000000 	.word	0x20000000
 800177c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fb10 	bl	8000da4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e280      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001792:	4baf      	ldr	r3, [pc, #700]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0x2a8>
 800179e:	e014      	b.n	80017ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff fb00 	bl	8000da4 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff fafc 	bl	8000da4 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	; 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e26c      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ba:	4ba5      	ldr	r3, [pc, #660]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x2d0>
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d060      	beq.n	8001898 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_OscConfig+0x310>
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b0c      	cmp	r3, #12
 80017e0:	d119      	bne.n	8001816 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d116      	bne.n	8001816 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e8:	4b99      	ldr	r3, [pc, #612]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_OscConfig+0x328>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e249      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001800:	4b93      	ldr	r3, [pc, #588]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	4990      	ldr	r1, [pc, #576]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001814:	e040      	b.n	8001898 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d023      	beq.n	8001866 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800181e:	4b8c      	ldr	r3, [pc, #560]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a8b      	ldr	r2, [pc, #556]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182a:	f7ff fabb 	bl	8000da4 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001832:	f7ff fab7 	bl	8000da4 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e227      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001844:	4b82      	ldr	r3, [pc, #520]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b7f      	ldr	r3, [pc, #508]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	497c      	ldr	r1, [pc, #496]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
 8001864:	e018      	b.n	8001898 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001866:	4b7a      	ldr	r3, [pc, #488]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a79      	ldr	r2, [pc, #484]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001872:	f7ff fa97 	bl	8000da4 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187a:	f7ff fa93 	bl	8000da4 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e203      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800188c:	4b70      	ldr	r3, [pc, #448]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f0      	bne.n	800187a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d03c      	beq.n	800191e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01c      	beq.n	80018e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ac:	4b68      	ldr	r3, [pc, #416]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80018ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b2:	4a67      	ldr	r2, [pc, #412]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff fa72 	bl	8000da4 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c4:	f7ff fa6e 	bl	8000da4 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e1de      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d6:	4b5e      	ldr	r3, [pc, #376]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80018d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0ef      	beq.n	80018c4 <HAL_RCC_OscConfig+0x3ec>
 80018e4:	e01b      	b.n	800191e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e6:	4b5a      	ldr	r3, [pc, #360]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80018e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ec:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff fa55 	bl	8000da4 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff fa51 	bl	8000da4 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e1c1      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001910:	4b4f      	ldr	r3, [pc, #316]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 8001912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ef      	bne.n	80018fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80a6 	beq.w	8001a78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001930:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10d      	bne.n	8001958 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193c:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	4a43      	ldr	r2, [pc, #268]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 8001942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001946:	6593      	str	r3, [r2, #88]	; 0x58
 8001948:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001954:	2301      	movs	r3, #1
 8001956:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001958:	4b3e      	ldr	r3, [pc, #248]	; (8001a54 <HAL_RCC_OscConfig+0x57c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d118      	bne.n	8001996 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001964:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_RCC_OscConfig+0x57c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a3a      	ldr	r2, [pc, #232]	; (8001a54 <HAL_RCC_OscConfig+0x57c>)
 800196a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001970:	f7ff fa18 	bl	8000da4 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001978:	f7ff fa14 	bl	8000da4 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e184      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198a:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <HAL_RCC_OscConfig+0x57c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d108      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4d8>
 800199e:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80019a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a4:	4a2a      	ldr	r2, [pc, #168]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ae:	e024      	b.n	80019fa <HAL_RCC_OscConfig+0x522>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d110      	bne.n	80019da <HAL_RCC_OscConfig+0x502>
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80019ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019be:	4a24      	ldr	r2, [pc, #144]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c8:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80019ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ce:	4a20      	ldr	r2, [pc, #128]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019d8:	e00f      	b.n	80019fa <HAL_RCC_OscConfig+0x522>
 80019da:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80019dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e0:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80019e2:	f023 0301 	bic.w	r3, r3, #1
 80019e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ea:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80019ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f0:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 80019f2:	f023 0304 	bic.w	r3, r3, #4
 80019f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d016      	beq.n	8001a30 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff f9cf 	bl	8000da4 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f7ff f9cb 	bl	8000da4 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e139      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_OscConfig+0x578>)
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0ed      	beq.n	8001a0a <HAL_RCC_OscConfig+0x532>
 8001a2e:	e01a      	b.n	8001a66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff f9b8 	bl	8000da4 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a36:	e00f      	b.n	8001a58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff f9b4 	bl	8000da4 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d906      	bls.n	8001a58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e122      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a58:	4b90      	ldr	r3, [pc, #576]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1e8      	bne.n	8001a38 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a66:	7ffb      	ldrb	r3, [r7, #31]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d105      	bne.n	8001a78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6c:	4b8b      	ldr	r3, [pc, #556]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	4a8a      	ldr	r2, [pc, #552]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 8108 	beq.w	8001c92 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	f040 80d0 	bne.w	8001c2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a8c:	4b83      	ldr	r3, [pc, #524]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0203 	and.w	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d130      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d127      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d11f      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001acc:	2a07      	cmp	r2, #7
 8001ace:	bf14      	ite	ne
 8001ad0:	2201      	movne	r2, #1
 8001ad2:	2200      	moveq	r2, #0
 8001ad4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d113      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae4:	085b      	lsrs	r3, r3, #1
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d109      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	3b01      	subs	r3, #1
 8001afc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d06e      	beq.n	8001be0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	2b0c      	cmp	r3, #12
 8001b06:	d069      	beq.n	8001bdc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b08:	4b64      	ldr	r3, [pc, #400]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d105      	bne.n	8001b20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b14:	4b61      	ldr	r3, [pc, #388]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0b7      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b24:	4b5d      	ldr	r3, [pc, #372]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a5c      	ldr	r2, [pc, #368]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b30:	f7ff f938 	bl	8000da4 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7ff f934 	bl	8000da4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e0a4      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b4a:	4b54      	ldr	r3, [pc, #336]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b56:	4b51      	ldr	r3, [pc, #324]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	4b51      	ldr	r3, [pc, #324]	; (8001ca0 <HAL_RCC_OscConfig+0x7c8>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b66:	3a01      	subs	r2, #1
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	4311      	orrs	r1, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b70:	0212      	lsls	r2, r2, #8
 8001b72:	4311      	orrs	r1, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b78:	0852      	lsrs	r2, r2, #1
 8001b7a:	3a01      	subs	r2, #1
 8001b7c:	0552      	lsls	r2, r2, #21
 8001b7e:	4311      	orrs	r1, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b84:	0852      	lsrs	r2, r2, #1
 8001b86:	3a01      	subs	r2, #1
 8001b88:	0652      	lsls	r2, r2, #25
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b90:	0912      	lsrs	r2, r2, #4
 8001b92:	0452      	lsls	r2, r2, #17
 8001b94:	430a      	orrs	r2, r1
 8001b96:	4941      	ldr	r1, [pc, #260]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b9c:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a3e      	ldr	r2, [pc, #248]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ba8:	4b3c      	ldr	r3, [pc, #240]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4a3b      	ldr	r2, [pc, #236]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bb4:	f7ff f8f6 	bl	8000da4 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff f8f2 	bl	8000da4 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e062      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bce:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bda:	e05a      	b.n	8001c92 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e059      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be0:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d152      	bne.n	8001c92 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf8:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a27      	ldr	r2, [pc, #156]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c04:	f7ff f8ce 	bl	8000da4 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff f8ca 	bl	8000da4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e03a      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x734>
 8001c2a:	e032      	b.n	8001c92 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d02d      	beq.n	8001c8e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c3c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c4a:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001c50:	f023 0303 	bic.w	r3, r3, #3
 8001c54:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001c5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c66:	f7ff f89d 	bl	8000da4 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7ff f899 	bl	8000da4 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e009      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_RCC_OscConfig+0x7c4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f0      	bne.n	8001c6e <HAL_RCC_OscConfig+0x796>
 8001c8c:	e001      	b.n	8001c92 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	f99d808c 	.word	0xf99d808c

08001ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0c8      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b66      	ldr	r3, [pc, #408]	; (8001e54 <HAL_RCC_ClockConfig+0x1b0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d910      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b63      	ldr	r3, [pc, #396]	; (8001e54 <HAL_RCC_ClockConfig+0x1b0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 0207 	bic.w	r2, r3, #7
 8001cce:	4961      	ldr	r1, [pc, #388]	; (8001e54 <HAL_RCC_ClockConfig+0x1b0>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b5f      	ldr	r3, [pc, #380]	; (8001e54 <HAL_RCC_ClockConfig+0x1b0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b0      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d04c      	beq.n	8001d8e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d107      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfc:	4b56      	ldr	r3, [pc, #344]	; (8001e58 <HAL_RCC_ClockConfig+0x1b4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d121      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e09e      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d14:	4b50      	ldr	r3, [pc, #320]	; (8001e58 <HAL_RCC_ClockConfig+0x1b4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d115      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e092      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d2c:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <HAL_RCC_ClockConfig+0x1b4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e086      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d3c:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <HAL_RCC_ClockConfig+0x1b4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e07e      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d4c:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <HAL_RCC_ClockConfig+0x1b4>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f023 0203 	bic.w	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	493f      	ldr	r1, [pc, #252]	; (8001e58 <HAL_RCC_ClockConfig+0x1b4>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d5e:	f7ff f821 	bl	8000da4 <HAL_GetTick>
 8001d62:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d66:	f7ff f81d 	bl	8000da4 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e066      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <HAL_RCC_ClockConfig+0x1b4>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 020c 	and.w	r2, r3, #12
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d1eb      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <HAL_RCC_ClockConfig+0x1b4>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	492c      	ldr	r1, [pc, #176]	; (8001e58 <HAL_RCC_ClockConfig+0x1b4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dac:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <HAL_RCC_ClockConfig+0x1b0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d210      	bcs.n	8001ddc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <HAL_RCC_ClockConfig+0x1b0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 0207 	bic.w	r2, r3, #7
 8001dc2:	4924      	ldr	r1, [pc, #144]	; (8001e54 <HAL_RCC_ClockConfig+0x1b0>)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <HAL_RCC_ClockConfig+0x1b0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e036      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_RCC_ClockConfig+0x1b4>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4918      	ldr	r1, [pc, #96]	; (8001e58 <HAL_RCC_ClockConfig+0x1b4>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d009      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_RCC_ClockConfig+0x1b4>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4910      	ldr	r1, [pc, #64]	; (8001e58 <HAL_RCC_ClockConfig+0x1b4>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e1a:	f000 f825 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_RCC_ClockConfig+0x1b4>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	490c      	ldr	r1, [pc, #48]	; (8001e5c <HAL_RCC_ClockConfig+0x1b8>)
 8001e2c:	5ccb      	ldrb	r3, [r1, r3]
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	fa22 f303 	lsr.w	r3, r2, r3
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe ff60 	bl	8000d04 <HAL_InitTick>
 8001e44:	4603      	mov	r3, r0
 8001e46:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e48:	7afb      	ldrb	r3, [r7, #11]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40022000 	.word	0x40022000
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08004084 	.word	0x08004084
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000004 	.word	0x20000004

08001e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e76:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e80:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x34>
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d121      	bne.n	8001eda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d11e      	bne.n	8001eda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e9c:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ea8:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e005      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ec4:	4a2b      	ldr	r2, [pc, #172]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ecc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	e004      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eec:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001eee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d134      	bne.n	8001f60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d003      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0xac>
 8001f0c:	e005      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f10:	617b      	str	r3, [r7, #20]
      break;
 8001f12:	e005      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f16:	617b      	str	r3, [r7, #20]
      break;
 8001f18:	e002      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	617b      	str	r3, [r7, #20]
      break;
 8001f1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	0a1b      	lsrs	r3, r3, #8
 8001f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	fb02 f203 	mul.w	r2, r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	0e5b      	lsrs	r3, r3, #25
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	3301      	adds	r3, #1
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f60:	69bb      	ldr	r3, [r7, #24]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3724      	adds	r7, #36	; 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	0800409c 	.word	0x0800409c
 8001f78:	00f42400 	.word	0x00f42400
 8001f7c:	007a1200 	.word	0x007a1200

08001f80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000000 	.word	0x20000000

08001f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f9c:	f7ff fff0 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	4904      	ldr	r1, [pc, #16]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fae:	5ccb      	ldrb	r3, [r1, r3]
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	08004094 	.word	0x08004094

08001fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fc8:	f7ff ffda 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	0adb      	lsrs	r3, r3, #11
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4904      	ldr	r1, [pc, #16]	; (8001fec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	08004094 	.word	0x08004094

08001ff0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002008:	f7ff fa02 	bl	8001410 <HAL_PWREx_GetVoltageRange>
 800200c:	6178      	str	r0, [r7, #20]
 800200e:	e014      	b.n	800203a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002010:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	4a24      	ldr	r2, [pc, #144]	; (80020a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201a:	6593      	str	r3, [r2, #88]	; 0x58
 800201c:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002028:	f7ff f9f2 	bl	8001410 <HAL_PWREx_GetVoltageRange>
 800202c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800202e:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	4a1d      	ldr	r2, [pc, #116]	; (80020a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002038:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002040:	d10b      	bne.n	800205a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b80      	cmp	r3, #128	; 0x80
 8002046:	d919      	bls.n	800207c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2ba0      	cmp	r3, #160	; 0xa0
 800204c:	d902      	bls.n	8002054 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800204e:	2302      	movs	r3, #2
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	e013      	b.n	800207c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002054:	2301      	movs	r3, #1
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	e010      	b.n	800207c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b80      	cmp	r3, #128	; 0x80
 800205e:	d902      	bls.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002060:	2303      	movs	r3, #3
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	e00a      	b.n	800207c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b80      	cmp	r3, #128	; 0x80
 800206a:	d102      	bne.n	8002072 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800206c:	2302      	movs	r3, #2
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	e004      	b.n	800207c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b70      	cmp	r3, #112	; 0x70
 8002076:	d101      	bne.n	800207c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002078:	2301      	movs	r3, #1
 800207a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 0207 	bic.w	r2, r3, #7
 8002084:	4909      	ldr	r1, [pc, #36]	; (80020ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	429a      	cmp	r2, r3
 8002098:	d001      	beq.n	800209e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40022000 	.word	0x40022000

080020b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020b8:	2300      	movs	r3, #0
 80020ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020bc:	2300      	movs	r3, #0
 80020be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d041      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020d4:	d02a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020da:	d824      	bhi.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020e0:	d008      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020e6:	d81e      	bhi.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020f0:	d010      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020f2:	e018      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020f4:	4b86      	ldr	r3, [pc, #536]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4a85      	ldr	r2, [pc, #532]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002100:	e015      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3304      	adds	r3, #4
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fabb 	bl	8002684 <RCCEx_PLLSAI1_Config>
 800210e:	4603      	mov	r3, r0
 8002110:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002112:	e00c      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3320      	adds	r3, #32
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fba6 	bl	800286c <RCCEx_PLLSAI2_Config>
 8002120:	4603      	mov	r3, r0
 8002122:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002124:	e003      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	74fb      	strb	r3, [r7, #19]
      break;
 800212a:	e000      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800212c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800212e:	7cfb      	ldrb	r3, [r7, #19]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10b      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002134:	4b76      	ldr	r3, [pc, #472]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002142:	4973      	ldr	r1, [pc, #460]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800214a:	e001      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800214c:	7cfb      	ldrb	r3, [r7, #19]
 800214e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d041      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002160:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002164:	d02a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002166:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800216a:	d824      	bhi.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800216c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002170:	d008      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002176:	d81e      	bhi.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800217c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002180:	d010      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002182:	e018      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002184:	4b62      	ldr	r3, [pc, #392]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a61      	ldr	r2, [pc, #388]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002190:	e015      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3304      	adds	r3, #4
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fa73 	bl	8002684 <RCCEx_PLLSAI1_Config>
 800219e:	4603      	mov	r3, r0
 80021a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021a2:	e00c      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3320      	adds	r3, #32
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fb5e 	bl	800286c <RCCEx_PLLSAI2_Config>
 80021b0:	4603      	mov	r3, r0
 80021b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021b4:	e003      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	74fb      	strb	r3, [r7, #19]
      break;
 80021ba:	e000      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021be:	7cfb      	ldrb	r3, [r7, #19]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10b      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021c4:	4b52      	ldr	r3, [pc, #328]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021d2:	494f      	ldr	r1, [pc, #316]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021da:	e001      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a0 	beq.w	800232e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021f2:	4b47      	ldr	r3, [pc, #284]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002202:	2300      	movs	r3, #0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00d      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002208:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220c:	4a40      	ldr	r2, [pc, #256]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002212:	6593      	str	r3, [r2, #88]	; 0x58
 8002214:	4b3e      	ldr	r3, [pc, #248]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002220:	2301      	movs	r3, #1
 8002222:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002224:	4b3b      	ldr	r3, [pc, #236]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a3a      	ldr	r2, [pc, #232]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800222a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002230:	f7fe fdb8 	bl	8000da4 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002236:	e009      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002238:	f7fe fdb4 	bl	8000da4 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d902      	bls.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	74fb      	strb	r3, [r7, #19]
        break;
 800224a:	e005      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800224c:	4b31      	ldr	r3, [pc, #196]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ef      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d15c      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800225e:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002268:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01f      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	429a      	cmp	r2, r3
 800227a:	d019      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002286:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002288:	4b21      	ldr	r3, [pc, #132]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228e:	4a20      	ldr	r2, [pc, #128]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229e:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d016      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7fe fd73 	bl	8000da4 <HAL_GetTick>
 80022be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c0:	e00b      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f7fe fd6f 	bl	8000da4 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d902      	bls.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	74fb      	strb	r3, [r7, #19]
            break;
 80022d8:	e006      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ec      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022fe:	4904      	ldr	r1, [pc, #16]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002306:	e009      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	74bb      	strb	r3, [r7, #18]
 800230c:	e006      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800231c:	7c7b      	ldrb	r3, [r7, #17]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d105      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002322:	4b9e      	ldr	r3, [pc, #632]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	4a9d      	ldr	r2, [pc, #628]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800233a:	4b98      	ldr	r3, [pc, #608]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002340:	f023 0203 	bic.w	r2, r3, #3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002348:	4994      	ldr	r1, [pc, #592]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800235c:	4b8f      	ldr	r3, [pc, #572]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	f023 020c 	bic.w	r2, r3, #12
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	498c      	ldr	r1, [pc, #560]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800237e:	4b87      	ldr	r3, [pc, #540]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002384:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	4983      	ldr	r1, [pc, #524]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023a0:	4b7e      	ldr	r3, [pc, #504]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	497b      	ldr	r1, [pc, #492]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023c2:	4b76      	ldr	r3, [pc, #472]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d0:	4972      	ldr	r1, [pc, #456]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023e4:	4b6d      	ldr	r3, [pc, #436]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	496a      	ldr	r1, [pc, #424]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002406:	4b65      	ldr	r3, [pc, #404]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	4961      	ldr	r1, [pc, #388]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002428:	4b5c      	ldr	r3, [pc, #368]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002436:	4959      	ldr	r1, [pc, #356]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800244a:	4b54      	ldr	r3, [pc, #336]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002450:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002458:	4950      	ldr	r1, [pc, #320]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800246c:	4b4b      	ldr	r3, [pc, #300]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	4948      	ldr	r1, [pc, #288]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800248e:	4b43      	ldr	r3, [pc, #268]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002494:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	493f      	ldr	r1, [pc, #252]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d028      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024b0:	4b3a      	ldr	r3, [pc, #232]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024be:	4937      	ldr	r1, [pc, #220]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ce:	d106      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4a31      	ldr	r2, [pc, #196]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024da:	60d3      	str	r3, [r2, #12]
 80024dc:	e011      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024e6:	d10c      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3304      	adds	r3, #4
 80024ec:	2101      	movs	r1, #1
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f8c8 	bl	8002684 <RCCEx_PLLSAI1_Config>
 80024f4:	4603      	mov	r3, r0
 80024f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80024fe:	7cfb      	ldrb	r3, [r7, #19]
 8002500:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d028      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800250e:	4b23      	ldr	r3, [pc, #140]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	491f      	ldr	r1, [pc, #124]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800252c:	d106      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	4a1a      	ldr	r2, [pc, #104]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002538:	60d3      	str	r3, [r2, #12]
 800253a:	e011      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002544:	d10c      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3304      	adds	r3, #4
 800254a:	2101      	movs	r1, #1
 800254c:	4618      	mov	r0, r3
 800254e:	f000 f899 	bl	8002684 <RCCEx_PLLSAI1_Config>
 8002552:	4603      	mov	r3, r0
 8002554:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002556:	7cfb      	ldrb	r3, [r7, #19]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d02b      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800258a:	d109      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4a02      	ldr	r2, [pc, #8]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002596:	60d3      	str	r3, [r2, #12]
 8002598:	e014      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2101      	movs	r1, #1
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 f867 	bl	8002684 <RCCEx_PLLSAI1_Config>
 80025b6:	4603      	mov	r3, r0
 80025b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d02f      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025de:	4928      	ldr	r1, [pc, #160]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ee:	d10d      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	2102      	movs	r1, #2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f844 	bl	8002684 <RCCEx_PLLSAI1_Config>
 80025fc:	4603      	mov	r3, r0
 80025fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d014      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	74bb      	strb	r3, [r7, #18]
 800260a:	e011      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002614:	d10c      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3320      	adds	r3, #32
 800261a:	2102      	movs	r1, #2
 800261c:	4618      	mov	r0, r3
 800261e:	f000 f925 	bl	800286c <RCCEx_PLLSAI2_Config>
 8002622:	4603      	mov	r3, r0
 8002624:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002642:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800264a:	490d      	ldr	r1, [pc, #52]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800265e:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002664:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800266e:	4904      	ldr	r1, [pc, #16]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002676:	7cbb      	ldrb	r3, [r7, #18]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000

08002684 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002692:	4b75      	ldr	r3, [pc, #468]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d018      	beq.n	80026d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800269e:	4b72      	ldr	r3, [pc, #456]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0203 	and.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d10d      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
       ||
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026b6:	4b6c      	ldr	r3, [pc, #432]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
       ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d047      	beq.n	800275a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e044      	b.n	800275a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d018      	beq.n	800270a <RCCEx_PLLSAI1_Config+0x86>
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d825      	bhi.n	8002728 <RCCEx_PLLSAI1_Config+0xa4>
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d002      	beq.n	80026e6 <RCCEx_PLLSAI1_Config+0x62>
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d009      	beq.n	80026f8 <RCCEx_PLLSAI1_Config+0x74>
 80026e4:	e020      	b.n	8002728 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026e6:	4b60      	ldr	r3, [pc, #384]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d11d      	bne.n	800272e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f6:	e01a      	b.n	800272e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026f8:	4b5b      	ldr	r3, [pc, #364]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d116      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002708:	e013      	b.n	8002732 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800270a:	4b57      	ldr	r3, [pc, #348]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002716:	4b54      	ldr	r3, [pc, #336]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002726:	e006      	b.n	8002736 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      break;
 800272c:	e004      	b.n	8002738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800272e:	bf00      	nop
 8002730:	e002      	b.n	8002738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002732:	bf00      	nop
 8002734:	e000      	b.n	8002738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002736:	bf00      	nop
    }

    if(status == HAL_OK)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10d      	bne.n	800275a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800273e:	4b4a      	ldr	r3, [pc, #296]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	430b      	orrs	r3, r1
 8002754:	4944      	ldr	r1, [pc, #272]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d17d      	bne.n	800285c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002760:	4b41      	ldr	r3, [pc, #260]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a40      	ldr	r2, [pc, #256]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002766:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800276a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276c:	f7fe fb1a 	bl	8000da4 <HAL_GetTick>
 8002770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002772:	e009      	b.n	8002788 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002774:	f7fe fb16 	bl	8000da4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d902      	bls.n	8002788 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	73fb      	strb	r3, [r7, #15]
        break;
 8002786:	e005      	b.n	8002794 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002788:	4b37      	ldr	r3, [pc, #220]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ef      	bne.n	8002774 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d160      	bne.n	800285c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d111      	bne.n	80027c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027a0:	4b31      	ldr	r3, [pc, #196]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6892      	ldr	r2, [r2, #8]
 80027b0:	0211      	lsls	r1, r2, #8
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68d2      	ldr	r2, [r2, #12]
 80027b6:	0912      	lsrs	r2, r2, #4
 80027b8:	0452      	lsls	r2, r2, #17
 80027ba:	430a      	orrs	r2, r1
 80027bc:	492a      	ldr	r1, [pc, #168]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	610b      	str	r3, [r1, #16]
 80027c2:	e027      	b.n	8002814 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d112      	bne.n	80027f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027ca:	4b27      	ldr	r3, [pc, #156]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6892      	ldr	r2, [r2, #8]
 80027da:	0211      	lsls	r1, r2, #8
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6912      	ldr	r2, [r2, #16]
 80027e0:	0852      	lsrs	r2, r2, #1
 80027e2:	3a01      	subs	r2, #1
 80027e4:	0552      	lsls	r2, r2, #21
 80027e6:	430a      	orrs	r2, r1
 80027e8:	491f      	ldr	r1, [pc, #124]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	610b      	str	r3, [r1, #16]
 80027ee:	e011      	b.n	8002814 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027f0:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6892      	ldr	r2, [r2, #8]
 8002800:	0211      	lsls	r1, r2, #8
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6952      	ldr	r2, [r2, #20]
 8002806:	0852      	lsrs	r2, r2, #1
 8002808:	3a01      	subs	r2, #1
 800280a:	0652      	lsls	r2, r2, #25
 800280c:	430a      	orrs	r2, r1
 800280e:	4916      	ldr	r1, [pc, #88]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a13      	ldr	r2, [pc, #76]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800281e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe fac0 	bl	8000da4 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002826:	e009      	b.n	800283c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002828:	f7fe fabc 	bl	8000da4 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d902      	bls.n	800283c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	73fb      	strb	r3, [r7, #15]
          break;
 800283a:	e005      	b.n	8002848 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ef      	beq.n	8002828 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	4904      	ldr	r1, [pc, #16]	; (8002868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002858:	4313      	orrs	r3, r2
 800285a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000

0800286c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800287a:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d018      	beq.n	80028b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002886:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f003 0203 	and.w	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d10d      	bne.n	80028b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
       ||
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800289e:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
       ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d047      	beq.n	8002942 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	e044      	b.n	8002942 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d018      	beq.n	80028f2 <RCCEx_PLLSAI2_Config+0x86>
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d825      	bhi.n	8002910 <RCCEx_PLLSAI2_Config+0xa4>
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d002      	beq.n	80028ce <RCCEx_PLLSAI2_Config+0x62>
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d009      	beq.n	80028e0 <RCCEx_PLLSAI2_Config+0x74>
 80028cc:	e020      	b.n	8002910 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ce:	4b55      	ldr	r3, [pc, #340]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d11d      	bne.n	8002916 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028de:	e01a      	b.n	8002916 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028e0:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d116      	bne.n	800291a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f0:	e013      	b.n	800291a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028f2:	4b4c      	ldr	r3, [pc, #304]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10f      	bne.n	800291e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028fe:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800290e:	e006      	b.n	800291e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
      break;
 8002914:	e004      	b.n	8002920 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002916:	bf00      	nop
 8002918:	e002      	b.n	8002920 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800291a:	bf00      	nop
 800291c:	e000      	b.n	8002920 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800291e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10d      	bne.n	8002942 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002926:	4b3f      	ldr	r3, [pc, #252]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6819      	ldr	r1, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	430b      	orrs	r3, r1
 800293c:	4939      	ldr	r1, [pc, #228]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d167      	bne.n	8002a18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002948:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a35      	ldr	r2, [pc, #212]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002954:	f7fe fa26 	bl	8000da4 <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800295a:	e009      	b.n	8002970 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800295c:	f7fe fa22 	bl	8000da4 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d902      	bls.n	8002970 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	73fb      	strb	r3, [r7, #15]
        break;
 800296e:	e005      	b.n	800297c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002970:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1ef      	bne.n	800295c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d14a      	bne.n	8002a18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d111      	bne.n	80029ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002988:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6892      	ldr	r2, [r2, #8]
 8002998:	0211      	lsls	r1, r2, #8
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68d2      	ldr	r2, [r2, #12]
 800299e:	0912      	lsrs	r2, r2, #4
 80029a0:	0452      	lsls	r2, r2, #17
 80029a2:	430a      	orrs	r2, r1
 80029a4:	491f      	ldr	r1, [pc, #124]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	614b      	str	r3, [r1, #20]
 80029aa:	e011      	b.n	80029d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6892      	ldr	r2, [r2, #8]
 80029bc:	0211      	lsls	r1, r2, #8
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6912      	ldr	r2, [r2, #16]
 80029c2:	0852      	lsrs	r2, r2, #1
 80029c4:	3a01      	subs	r2, #1
 80029c6:	0652      	lsls	r2, r2, #25
 80029c8:	430a      	orrs	r2, r1
 80029ca:	4916      	ldr	r1, [pc, #88]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7fe f9e2 	bl	8000da4 <HAL_GetTick>
 80029e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029e2:	e009      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029e4:	f7fe f9de 	bl	8000da4 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d902      	bls.n	80029f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	73fb      	strb	r3, [r7, #15]
          break;
 80029f6:	e005      	b.n	8002a04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ef      	beq.n	80029e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	4904      	ldr	r1, [pc, #16]	; (8002a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000

08002a28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d06c      	beq.n	8002b14 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fd feea 	bl	8000828 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	22ca      	movs	r2, #202	; 0xca
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2253      	movs	r2, #83	; 0x53
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f9a0 	bl	8002db2 <RTC_EnterInitMode>
 8002a72:	4603      	mov	r3, r0
 8002a74:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d14b      	bne.n	8002b14 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a8e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6899      	ldr	r1, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68d2      	ldr	r2, [r2, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6919      	ldr	r1, [r3, #16]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	041a      	lsls	r2, r3, #16
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f9a3 	bl	8002e18 <RTC_ExitInitMode>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d11b      	bne.n	8002b14 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0203 	bic.w	r2, r2, #3
 8002aea:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	22ff      	movs	r2, #255	; 0xff
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b1e:	b590      	push	{r4, r7, lr}
 8002b20:	b087      	sub	sp, #28
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_RTC_SetTime+0x1a>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e08b      	b.n	8002c50 <HAL_RTC_SetTime+0x132>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	22ca      	movs	r2, #202	; 0xca
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2253      	movs	r2, #83	; 0x53
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f92a 	bl	8002db2 <RTC_EnterInitMode>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002b62:	7cfb      	ldrb	r3, [r7, #19]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d163      	bne.n	8002c30 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d126      	bne.n	8002bbc <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f984 	bl	8002e94 <RTC_ByteToBcd2>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	785b      	ldrb	r3, [r3, #1]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 f97d 	bl	8002e94 <RTC_ByteToBcd2>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b9e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	789b      	ldrb	r3, [r3, #2]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 f975 	bl	8002e94 <RTC_ByteToBcd2>
 8002baa:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002bac:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	78db      	ldrb	r3, [r3, #3]
 8002bb4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	e018      	b.n	8002bee <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	785b      	ldrb	r3, [r3, #1]
 8002bda:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002bdc:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002be2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	78db      	ldrb	r3, [r3, #3]
 8002be8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002bf8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002bfc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c0c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6899      	ldr	r1, [r3, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f8f6 	bl	8002e18 <RTC_ExitInitMode>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	22ff      	movs	r2, #255	; 0xff
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002c38:	7cfb      	ldrb	r3, [r7, #19]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002c4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd90      	pop	{r4, r7, pc}

08002c58 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_RTC_SetDate+0x1a>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e075      	b.n	8002d5e <HAL_RTC_SetDate+0x106>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10e      	bne.n	8002ca6 <HAL_RTC_SetDate+0x4e>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	785b      	ldrb	r3, [r3, #1]
 8002c98:	f023 0310 	bic.w	r3, r3, #16
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	330a      	adds	r3, #10
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d11c      	bne.n	8002ce6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	78db      	ldrb	r3, [r3, #3]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f8ef 	bl	8002e94 <RTC_ByteToBcd2>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	785b      	ldrb	r3, [r3, #1]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f8e8 	bl	8002e94 <RTC_ByteToBcd2>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002cc8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	789b      	ldrb	r3, [r3, #2]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 f8e0 	bl	8002e94 <RTC_ByteToBcd2>
 8002cd4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002cd6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e00e      	b.n	8002d04 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	78db      	ldrb	r3, [r3, #3]
 8002cea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	785b      	ldrb	r3, [r3, #1]
 8002cf0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002cf2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002cf8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	22ca      	movs	r2, #202	; 0xca
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2253      	movs	r2, #83	; 0x53
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f84c 	bl	8002db2 <RTC_EnterInitMode>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10c      	bne.n	8002d3e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d32:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f86f 	bl	8002e18 <RTC_ExitInitMode>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	22ff      	movs	r2, #255	; 0xff
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d103      	bne.n	8002d54 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002d5c:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}

08002d66 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d7c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002d7e:	f7fe f811 	bl	8000da4 <HAL_GetTick>
 8002d82:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d84:	e009      	b.n	8002d9a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d86:	f7fe f80d 	bl	8000da4 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d94:	d901      	bls.n	8002d9a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e007      	b.n	8002daa <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ee      	beq.n	8002d86 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d120      	bne.n	8002e0e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dd4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002dd6:	f7fd ffe5 	bl	8000da4 <HAL_GetTick>
 8002dda:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002ddc:	e00d      	b.n	8002dfa <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002dde:	f7fd ffe1 	bl	8000da4 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dec:	d905      	bls.n	8002dfa <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2203      	movs	r2, #3
 8002df6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <RTC_EnterInitMode+0x5c>
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d1e7      	bne.n	8002dde <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002e24:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <RTC_ExitInitMode+0x78>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4a19      	ldr	r2, [pc, #100]	; (8002e90 <RTC_ExitInitMode+0x78>)
 8002e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e2e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002e30:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <RTC_ExitInitMode+0x78>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10c      	bne.n	8002e56 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff92 	bl	8002d66 <HAL_RTC_WaitForSynchro>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01e      	beq.n	8002e86 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	73fb      	strb	r3, [r7, #15]
 8002e54:	e017      	b.n	8002e86 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <RTC_ExitInitMode+0x78>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	4a0d      	ldr	r2, [pc, #52]	; (8002e90 <RTC_ExitInitMode+0x78>)
 8002e5c:	f023 0320 	bic.w	r3, r3, #32
 8002e60:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff ff7f 	bl	8002d66 <HAL_RTC_WaitForSynchro>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <RTC_ExitInitMode+0x78>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <RTC_ExitInitMode+0x78>)
 8002e80:	f043 0320 	orr.w	r3, r3, #32
 8002e84:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40002800 	.word	0x40002800

08002e94 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002ea6:	e005      	b.n	8002eb4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8002eae:	7afb      	ldrb	r3, [r7, #11]
 8002eb0:	3b0a      	subs	r3, #10
 8002eb2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	2b09      	cmp	r3, #9
 8002eb8:	d8f6      	bhi.n	8002ea8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	7afb      	ldrb	r3, [r7, #11]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	b2db      	uxtb	r3, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e07f      	b.n	8002fee <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	22ca      	movs	r2, #202	; 0xca
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2253      	movs	r2, #83	; 0x53
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002f2e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d120      	bne.n	8002f80 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8002f3e:	f7fd ff31 	bl	8000da4 <HAL_GetTick>
 8002f42:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002f44:	e015      	b.n	8002f72 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f46:	f7fd ff2d 	bl	8000da4 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f54:	d90d      	bls.n	8002f72 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	22ff      	movs	r2, #255	; 0xff
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2203      	movs	r2, #3
 8002f62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e03d      	b.n	8002fee <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0e2      	beq.n	8002f46 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 0107 	bic.w	r1, r3, #7
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002f9c:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fa6:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002fa8:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fb2:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fc2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fd2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	22ff      	movs	r2, #255	; 0xff
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40010400 	.word	0x40010400

08002ffc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003004:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003006:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800300a:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800302a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f80b 	bl	8003048 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40010400 	.word	0x40010400

08003048 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e095      	b.n	800319a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800307e:	d009      	beq.n	8003094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	61da      	str	r2, [r3, #28]
 8003086:	e005      	b.n	8003094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fd fc1a 	bl	80008e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030d4:	d902      	bls.n	80030dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	e002      	b.n	80030e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030ea:	d007      	beq.n	80030fc <HAL_SPI_Init+0xa0>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030f4:	d002      	beq.n	80030fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313e:	ea42 0103 	orr.w	r1, r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	0c1b      	lsrs	r3, r3, #16
 8003158:	f003 0204 	and.w	r2, r3, #4
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003178:	ea42 0103 	orr.w	r1, r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e049      	b.n	8003248 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d106      	bne.n	80031ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7fd fcb9 	bl	8000b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3304      	adds	r3, #4
 80031de:	4619      	mov	r1, r3
 80031e0:	4610      	mov	r0, r2
 80031e2:	f000 f987 	bl	80034f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b02      	cmp	r3, #2
 8003264:	d122      	bne.n	80032ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b02      	cmp	r3, #2
 8003272:	d11b      	bne.n	80032ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0202 	mvn.w	r2, #2
 800327c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f90f 	bl	80034b6 <HAL_TIM_IC_CaptureCallback>
 8003298:	e005      	b.n	80032a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f901 	bl	80034a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f912 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d122      	bne.n	8003300 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d11b      	bne.n	8003300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0204 	mvn.w	r2, #4
 80032d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f8e5 	bl	80034b6 <HAL_TIM_IC_CaptureCallback>
 80032ec:	e005      	b.n	80032fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8d7 	bl	80034a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f8e8 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b08      	cmp	r3, #8
 800330c:	d122      	bne.n	8003354 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b08      	cmp	r3, #8
 800331a:	d11b      	bne.n	8003354 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0208 	mvn.w	r2, #8
 8003324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2204      	movs	r2, #4
 800332a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f8bb 	bl	80034b6 <HAL_TIM_IC_CaptureCallback>
 8003340:	e005      	b.n	800334e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f8ad 	bl	80034a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f8be 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	2b10      	cmp	r3, #16
 8003360:	d122      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b10      	cmp	r3, #16
 800336e:	d11b      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0210 	mvn.w	r2, #16
 8003378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2208      	movs	r2, #8
 800337e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f891 	bl	80034b6 <HAL_TIM_IC_CaptureCallback>
 8003394:	e005      	b.n	80033a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f883 	bl	80034a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f894 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d10e      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d107      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0201 	mvn.w	r2, #1
 80033cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f85d 	bl	800348e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b80      	cmp	r3, #128	; 0x80
 80033e0:	d10e      	bne.n	8003400 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ec:	2b80      	cmp	r3, #128	; 0x80
 80033ee:	d107      	bne.n	8003400 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f91e 	bl	800363c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340e:	d10e      	bne.n	800342e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341a:	2b80      	cmp	r3, #128	; 0x80
 800341c:	d107      	bne.n	800342e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f911 	bl	8003650 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003438:	2b40      	cmp	r3, #64	; 0x40
 800343a:	d10e      	bne.n	800345a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	2b40      	cmp	r3, #64	; 0x40
 8003448:	d107      	bne.n	800345a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f842 	bl	80034de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b20      	cmp	r3, #32
 8003466:	d10e      	bne.n	8003486 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b20      	cmp	r3, #32
 8003474:	d107      	bne.n	8003486 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f06f 0220 	mvn.w	r2, #32
 800347e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f8d1 	bl	8003628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a40      	ldr	r2, [pc, #256]	; (8003608 <TIM_Base_SetConfig+0x114>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003512:	d00f      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a3d      	ldr	r2, [pc, #244]	; (800360c <TIM_Base_SetConfig+0x118>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00b      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3c      	ldr	r2, [pc, #240]	; (8003610 <TIM_Base_SetConfig+0x11c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3b      	ldr	r2, [pc, #236]	; (8003614 <TIM_Base_SetConfig+0x120>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3a      	ldr	r2, [pc, #232]	; (8003618 <TIM_Base_SetConfig+0x124>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d108      	bne.n	8003546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2f      	ldr	r2, [pc, #188]	; (8003608 <TIM_Base_SetConfig+0x114>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01f      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003554:	d01b      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2c      	ldr	r2, [pc, #176]	; (800360c <TIM_Base_SetConfig+0x118>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d017      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2b      	ldr	r2, [pc, #172]	; (8003610 <TIM_Base_SetConfig+0x11c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <TIM_Base_SetConfig+0x120>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00f      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a29      	ldr	r2, [pc, #164]	; (8003618 <TIM_Base_SetConfig+0x124>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00b      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a28      	ldr	r2, [pc, #160]	; (800361c <TIM_Base_SetConfig+0x128>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a27      	ldr	r2, [pc, #156]	; (8003620 <TIM_Base_SetConfig+0x12c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a26      	ldr	r2, [pc, #152]	; (8003624 <TIM_Base_SetConfig+0x130>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d108      	bne.n	80035a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a10      	ldr	r2, [pc, #64]	; (8003608 <TIM_Base_SetConfig+0x114>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00f      	beq.n	80035ec <TIM_Base_SetConfig+0xf8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a12      	ldr	r2, [pc, #72]	; (8003618 <TIM_Base_SetConfig+0x124>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00b      	beq.n	80035ec <TIM_Base_SetConfig+0xf8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a11      	ldr	r2, [pc, #68]	; (800361c <TIM_Base_SetConfig+0x128>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <TIM_Base_SetConfig+0xf8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a10      	ldr	r2, [pc, #64]	; (8003620 <TIM_Base_SetConfig+0x12c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <TIM_Base_SetConfig+0xf8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a0f      	ldr	r2, [pc, #60]	; (8003624 <TIM_Base_SetConfig+0x130>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d103      	bne.n	80035f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	615a      	str	r2, [r3, #20]
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800
 8003614:	40000c00 	.word	0x40000c00
 8003618:	40013400 	.word	0x40013400
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800

08003628 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e040      	b.n	80036f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fab0 	bl	8000bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2224      	movs	r2, #36	; 0x24
 8003690:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0201 	bic.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f8c0 	bl	8003828 <UART_SetConfig>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e022      	b.n	80036f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fb3e 	bl	8003d3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fbc5 	bl	8003e80 <UART_CheckIdleState>
 80036f6:	4603      	mov	r3, r0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003714:	2b20      	cmp	r3, #32
 8003716:	f040 8082 	bne.w	800381e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_UART_Transmit+0x26>
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e07a      	b.n	8003820 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_UART_Transmit+0x38>
 8003734:	2302      	movs	r3, #2
 8003736:	e073      	b.n	8003820 <HAL_UART_Transmit+0x120>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2221      	movs	r2, #33	; 0x21
 800374c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800374e:	f7fd fb29 	bl	8000da4 <HAL_GetTick>
 8003752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	88fa      	ldrh	r2, [r7, #6]
 8003758:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	88fa      	ldrh	r2, [r7, #6]
 8003760:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376c:	d108      	bne.n	8003780 <HAL_UART_Transmit+0x80>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	e003      	b.n	8003788 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003790:	e02d      	b.n	80037ee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	2180      	movs	r1, #128	; 0x80
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 fbb8 	bl	8003f12 <UART_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e039      	b.n	8003820 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10b      	bne.n	80037ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	881a      	ldrh	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037be:	b292      	uxth	r2, r2
 80037c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	3302      	adds	r3, #2
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	e008      	b.n	80037dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	b292      	uxth	r2, r2
 80037d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3301      	adds	r3, #1
 80037da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1cb      	bne.n	8003792 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	2140      	movs	r1, #64	; 0x40
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fb84 	bl	8003f12 <UART_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e005      	b.n	8003820 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e000      	b.n	8003820 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800381e:	2302      	movs	r3, #2
  }
}
 8003820:	4618      	mov	r0, r3
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003828:	b5b0      	push	{r4, r5, r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	4313      	orrs	r3, r2
 800384a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4bad      	ldr	r3, [pc, #692]	; (8003b08 <UART_SetConfig+0x2e0>)
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	69f9      	ldr	r1, [r7, #28]
 800385c:	430b      	orrs	r3, r1
 800385e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4aa2      	ldr	r2, [pc, #648]	; (8003b0c <UART_SetConfig+0x2e4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d004      	beq.n	8003890 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	4313      	orrs	r3, r2
 800388e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a99      	ldr	r2, [pc, #612]	; (8003b10 <UART_SetConfig+0x2e8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d121      	bne.n	80038f2 <UART_SetConfig+0xca>
 80038ae:	4b99      	ldr	r3, [pc, #612]	; (8003b14 <UART_SetConfig+0x2ec>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d817      	bhi.n	80038ec <UART_SetConfig+0xc4>
 80038bc:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <UART_SetConfig+0x9c>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	080038d5 	.word	0x080038d5
 80038c8:	080038e1 	.word	0x080038e1
 80038cc:	080038db 	.word	0x080038db
 80038d0:	080038e7 	.word	0x080038e7
 80038d4:	2301      	movs	r3, #1
 80038d6:	76fb      	strb	r3, [r7, #27]
 80038d8:	e0e7      	b.n	8003aaa <UART_SetConfig+0x282>
 80038da:	2302      	movs	r3, #2
 80038dc:	76fb      	strb	r3, [r7, #27]
 80038de:	e0e4      	b.n	8003aaa <UART_SetConfig+0x282>
 80038e0:	2304      	movs	r3, #4
 80038e2:	76fb      	strb	r3, [r7, #27]
 80038e4:	e0e1      	b.n	8003aaa <UART_SetConfig+0x282>
 80038e6:	2308      	movs	r3, #8
 80038e8:	76fb      	strb	r3, [r7, #27]
 80038ea:	e0de      	b.n	8003aaa <UART_SetConfig+0x282>
 80038ec:	2310      	movs	r3, #16
 80038ee:	76fb      	strb	r3, [r7, #27]
 80038f0:	e0db      	b.n	8003aaa <UART_SetConfig+0x282>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a88      	ldr	r2, [pc, #544]	; (8003b18 <UART_SetConfig+0x2f0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d132      	bne.n	8003962 <UART_SetConfig+0x13a>
 80038fc:	4b85      	ldr	r3, [pc, #532]	; (8003b14 <UART_SetConfig+0x2ec>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d828      	bhi.n	800395c <UART_SetConfig+0x134>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <UART_SetConfig+0xe8>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003945 	.word	0x08003945
 8003914:	0800395d 	.word	0x0800395d
 8003918:	0800395d 	.word	0x0800395d
 800391c:	0800395d 	.word	0x0800395d
 8003920:	08003951 	.word	0x08003951
 8003924:	0800395d 	.word	0x0800395d
 8003928:	0800395d 	.word	0x0800395d
 800392c:	0800395d 	.word	0x0800395d
 8003930:	0800394b 	.word	0x0800394b
 8003934:	0800395d 	.word	0x0800395d
 8003938:	0800395d 	.word	0x0800395d
 800393c:	0800395d 	.word	0x0800395d
 8003940:	08003957 	.word	0x08003957
 8003944:	2300      	movs	r3, #0
 8003946:	76fb      	strb	r3, [r7, #27]
 8003948:	e0af      	b.n	8003aaa <UART_SetConfig+0x282>
 800394a:	2302      	movs	r3, #2
 800394c:	76fb      	strb	r3, [r7, #27]
 800394e:	e0ac      	b.n	8003aaa <UART_SetConfig+0x282>
 8003950:	2304      	movs	r3, #4
 8003952:	76fb      	strb	r3, [r7, #27]
 8003954:	e0a9      	b.n	8003aaa <UART_SetConfig+0x282>
 8003956:	2308      	movs	r3, #8
 8003958:	76fb      	strb	r3, [r7, #27]
 800395a:	e0a6      	b.n	8003aaa <UART_SetConfig+0x282>
 800395c:	2310      	movs	r3, #16
 800395e:	76fb      	strb	r3, [r7, #27]
 8003960:	e0a3      	b.n	8003aaa <UART_SetConfig+0x282>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a6d      	ldr	r2, [pc, #436]	; (8003b1c <UART_SetConfig+0x2f4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d120      	bne.n	80039ae <UART_SetConfig+0x186>
 800396c:	4b69      	ldr	r3, [pc, #420]	; (8003b14 <UART_SetConfig+0x2ec>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003976:	2b30      	cmp	r3, #48	; 0x30
 8003978:	d013      	beq.n	80039a2 <UART_SetConfig+0x17a>
 800397a:	2b30      	cmp	r3, #48	; 0x30
 800397c:	d814      	bhi.n	80039a8 <UART_SetConfig+0x180>
 800397e:	2b20      	cmp	r3, #32
 8003980:	d009      	beq.n	8003996 <UART_SetConfig+0x16e>
 8003982:	2b20      	cmp	r3, #32
 8003984:	d810      	bhi.n	80039a8 <UART_SetConfig+0x180>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <UART_SetConfig+0x168>
 800398a:	2b10      	cmp	r3, #16
 800398c:	d006      	beq.n	800399c <UART_SetConfig+0x174>
 800398e:	e00b      	b.n	80039a8 <UART_SetConfig+0x180>
 8003990:	2300      	movs	r3, #0
 8003992:	76fb      	strb	r3, [r7, #27]
 8003994:	e089      	b.n	8003aaa <UART_SetConfig+0x282>
 8003996:	2302      	movs	r3, #2
 8003998:	76fb      	strb	r3, [r7, #27]
 800399a:	e086      	b.n	8003aaa <UART_SetConfig+0x282>
 800399c:	2304      	movs	r3, #4
 800399e:	76fb      	strb	r3, [r7, #27]
 80039a0:	e083      	b.n	8003aaa <UART_SetConfig+0x282>
 80039a2:	2308      	movs	r3, #8
 80039a4:	76fb      	strb	r3, [r7, #27]
 80039a6:	e080      	b.n	8003aaa <UART_SetConfig+0x282>
 80039a8:	2310      	movs	r3, #16
 80039aa:	76fb      	strb	r3, [r7, #27]
 80039ac:	e07d      	b.n	8003aaa <UART_SetConfig+0x282>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a5b      	ldr	r2, [pc, #364]	; (8003b20 <UART_SetConfig+0x2f8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d120      	bne.n	80039fa <UART_SetConfig+0x1d2>
 80039b8:	4b56      	ldr	r3, [pc, #344]	; (8003b14 <UART_SetConfig+0x2ec>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039c2:	2bc0      	cmp	r3, #192	; 0xc0
 80039c4:	d013      	beq.n	80039ee <UART_SetConfig+0x1c6>
 80039c6:	2bc0      	cmp	r3, #192	; 0xc0
 80039c8:	d814      	bhi.n	80039f4 <UART_SetConfig+0x1cc>
 80039ca:	2b80      	cmp	r3, #128	; 0x80
 80039cc:	d009      	beq.n	80039e2 <UART_SetConfig+0x1ba>
 80039ce:	2b80      	cmp	r3, #128	; 0x80
 80039d0:	d810      	bhi.n	80039f4 <UART_SetConfig+0x1cc>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <UART_SetConfig+0x1b4>
 80039d6:	2b40      	cmp	r3, #64	; 0x40
 80039d8:	d006      	beq.n	80039e8 <UART_SetConfig+0x1c0>
 80039da:	e00b      	b.n	80039f4 <UART_SetConfig+0x1cc>
 80039dc:	2300      	movs	r3, #0
 80039de:	76fb      	strb	r3, [r7, #27]
 80039e0:	e063      	b.n	8003aaa <UART_SetConfig+0x282>
 80039e2:	2302      	movs	r3, #2
 80039e4:	76fb      	strb	r3, [r7, #27]
 80039e6:	e060      	b.n	8003aaa <UART_SetConfig+0x282>
 80039e8:	2304      	movs	r3, #4
 80039ea:	76fb      	strb	r3, [r7, #27]
 80039ec:	e05d      	b.n	8003aaa <UART_SetConfig+0x282>
 80039ee:	2308      	movs	r3, #8
 80039f0:	76fb      	strb	r3, [r7, #27]
 80039f2:	e05a      	b.n	8003aaa <UART_SetConfig+0x282>
 80039f4:	2310      	movs	r3, #16
 80039f6:	76fb      	strb	r3, [r7, #27]
 80039f8:	e057      	b.n	8003aaa <UART_SetConfig+0x282>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a49      	ldr	r2, [pc, #292]	; (8003b24 <UART_SetConfig+0x2fc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d125      	bne.n	8003a50 <UART_SetConfig+0x228>
 8003a04:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <UART_SetConfig+0x2ec>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a12:	d017      	beq.n	8003a44 <UART_SetConfig+0x21c>
 8003a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a18:	d817      	bhi.n	8003a4a <UART_SetConfig+0x222>
 8003a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1e:	d00b      	beq.n	8003a38 <UART_SetConfig+0x210>
 8003a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a24:	d811      	bhi.n	8003a4a <UART_SetConfig+0x222>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <UART_SetConfig+0x20a>
 8003a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a2e:	d006      	beq.n	8003a3e <UART_SetConfig+0x216>
 8003a30:	e00b      	b.n	8003a4a <UART_SetConfig+0x222>
 8003a32:	2300      	movs	r3, #0
 8003a34:	76fb      	strb	r3, [r7, #27]
 8003a36:	e038      	b.n	8003aaa <UART_SetConfig+0x282>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	76fb      	strb	r3, [r7, #27]
 8003a3c:	e035      	b.n	8003aaa <UART_SetConfig+0x282>
 8003a3e:	2304      	movs	r3, #4
 8003a40:	76fb      	strb	r3, [r7, #27]
 8003a42:	e032      	b.n	8003aaa <UART_SetConfig+0x282>
 8003a44:	2308      	movs	r3, #8
 8003a46:	76fb      	strb	r3, [r7, #27]
 8003a48:	e02f      	b.n	8003aaa <UART_SetConfig+0x282>
 8003a4a:	2310      	movs	r3, #16
 8003a4c:	76fb      	strb	r3, [r7, #27]
 8003a4e:	e02c      	b.n	8003aaa <UART_SetConfig+0x282>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2d      	ldr	r2, [pc, #180]	; (8003b0c <UART_SetConfig+0x2e4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d125      	bne.n	8003aa6 <UART_SetConfig+0x27e>
 8003a5a:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <UART_SetConfig+0x2ec>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a68:	d017      	beq.n	8003a9a <UART_SetConfig+0x272>
 8003a6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a6e:	d817      	bhi.n	8003aa0 <UART_SetConfig+0x278>
 8003a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a74:	d00b      	beq.n	8003a8e <UART_SetConfig+0x266>
 8003a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a7a:	d811      	bhi.n	8003aa0 <UART_SetConfig+0x278>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <UART_SetConfig+0x260>
 8003a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a84:	d006      	beq.n	8003a94 <UART_SetConfig+0x26c>
 8003a86:	e00b      	b.n	8003aa0 <UART_SetConfig+0x278>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	76fb      	strb	r3, [r7, #27]
 8003a8c:	e00d      	b.n	8003aaa <UART_SetConfig+0x282>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	76fb      	strb	r3, [r7, #27]
 8003a92:	e00a      	b.n	8003aaa <UART_SetConfig+0x282>
 8003a94:	2304      	movs	r3, #4
 8003a96:	76fb      	strb	r3, [r7, #27]
 8003a98:	e007      	b.n	8003aaa <UART_SetConfig+0x282>
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	76fb      	strb	r3, [r7, #27]
 8003a9e:	e004      	b.n	8003aaa <UART_SetConfig+0x282>
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	76fb      	strb	r3, [r7, #27]
 8003aa4:	e001      	b.n	8003aaa <UART_SetConfig+0x282>
 8003aa6:	2310      	movs	r3, #16
 8003aa8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <UART_SetConfig+0x2e4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	f040 8087 	bne.w	8003bc4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ab6:	7efb      	ldrb	r3, [r7, #27]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d837      	bhi.n	8003b2c <UART_SetConfig+0x304>
 8003abc:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <UART_SetConfig+0x29c>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003ae9 	.word	0x08003ae9
 8003ac8:	08003b2d 	.word	0x08003b2d
 8003acc:	08003af1 	.word	0x08003af1
 8003ad0:	08003b2d 	.word	0x08003b2d
 8003ad4:	08003af7 	.word	0x08003af7
 8003ad8:	08003b2d 	.word	0x08003b2d
 8003adc:	08003b2d 	.word	0x08003b2d
 8003ae0:	08003b2d 	.word	0x08003b2d
 8003ae4:	08003aff 	.word	0x08003aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae8:	f7fe fa56 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8003aec:	6178      	str	r0, [r7, #20]
        break;
 8003aee:	e022      	b.n	8003b36 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af0:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <UART_SetConfig+0x300>)
 8003af2:	617b      	str	r3, [r7, #20]
        break;
 8003af4:	e01f      	b.n	8003b36 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af6:	f7fe f9b7 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8003afa:	6178      	str	r0, [r7, #20]
        break;
 8003afc:	e01b      	b.n	8003b36 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b02:	617b      	str	r3, [r7, #20]
        break;
 8003b04:	e017      	b.n	8003b36 <UART_SetConfig+0x30e>
 8003b06:	bf00      	nop
 8003b08:	efff69f3 	.word	0xefff69f3
 8003b0c:	40008000 	.word	0x40008000
 8003b10:	40013800 	.word	0x40013800
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40004400 	.word	0x40004400
 8003b1c:	40004800 	.word	0x40004800
 8003b20:	40004c00 	.word	0x40004c00
 8003b24:	40005000 	.word	0x40005000
 8003b28:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	76bb      	strb	r3, [r7, #26]
        break;
 8003b34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80f1 	beq.w	8003d20 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d305      	bcc.n	8003b5a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d902      	bls.n	8003b60 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	76bb      	strb	r3, [r7, #26]
 8003b5e:	e0df      	b.n	8003d20 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f04f 0100 	mov.w	r1, #0
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	020b      	lsls	r3, r1, #8
 8003b72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b76:	0202      	lsls	r2, r0, #8
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	6849      	ldr	r1, [r1, #4]
 8003b7c:	0849      	lsrs	r1, r1, #1
 8003b7e:	4608      	mov	r0, r1
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	1814      	adds	r4, r2, r0
 8003b86:	eb43 0501 	adc.w	r5, r3, r1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	4620      	mov	r0, r4
 8003b96:	4629      	mov	r1, r5
 8003b98:	f7fc fb16 	bl	80001c8 <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003baa:	d308      	bcc.n	8003bbe <UART_SetConfig+0x396>
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb2:	d204      	bcs.n	8003bbe <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	60da      	str	r2, [r3, #12]
 8003bbc:	e0b0      	b.n	8003d20 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	76bb      	strb	r3, [r7, #26]
 8003bc2:	e0ad      	b.n	8003d20 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bcc:	d15c      	bne.n	8003c88 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003bce:	7efb      	ldrb	r3, [r7, #27]
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d828      	bhi.n	8003c26 <UART_SetConfig+0x3fe>
 8003bd4:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <UART_SetConfig+0x3b4>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003c01 	.word	0x08003c01
 8003be0:	08003c09 	.word	0x08003c09
 8003be4:	08003c11 	.word	0x08003c11
 8003be8:	08003c27 	.word	0x08003c27
 8003bec:	08003c17 	.word	0x08003c17
 8003bf0:	08003c27 	.word	0x08003c27
 8003bf4:	08003c27 	.word	0x08003c27
 8003bf8:	08003c27 	.word	0x08003c27
 8003bfc:	08003c1f 	.word	0x08003c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c00:	f7fe f9ca 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8003c04:	6178      	str	r0, [r7, #20]
        break;
 8003c06:	e013      	b.n	8003c30 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c08:	f7fe f9dc 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8003c0c:	6178      	str	r0, [r7, #20]
        break;
 8003c0e:	e00f      	b.n	8003c30 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c10:	4b49      	ldr	r3, [pc, #292]	; (8003d38 <UART_SetConfig+0x510>)
 8003c12:	617b      	str	r3, [r7, #20]
        break;
 8003c14:	e00c      	b.n	8003c30 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c16:	f7fe f927 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8003c1a:	6178      	str	r0, [r7, #20]
        break;
 8003c1c:	e008      	b.n	8003c30 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c22:	617b      	str	r3, [r7, #20]
        break;
 8003c24:	e004      	b.n	8003c30 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	76bb      	strb	r3, [r7, #26]
        break;
 8003c2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d074      	beq.n	8003d20 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	005a      	lsls	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	441a      	add	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b0f      	cmp	r3, #15
 8003c52:	d916      	bls.n	8003c82 <UART_SetConfig+0x45a>
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5a:	d212      	bcs.n	8003c82 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	f023 030f 	bic.w	r3, r3, #15
 8003c64:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	89fb      	ldrh	r3, [r7, #14]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	89fa      	ldrh	r2, [r7, #14]
 8003c7e:	60da      	str	r2, [r3, #12]
 8003c80:	e04e      	b.n	8003d20 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	76bb      	strb	r3, [r7, #26]
 8003c86:	e04b      	b.n	8003d20 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c88:	7efb      	ldrb	r3, [r7, #27]
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d827      	bhi.n	8003cde <UART_SetConfig+0x4b6>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <UART_SetConfig+0x46c>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08003cc1 	.word	0x08003cc1
 8003c9c:	08003cc9 	.word	0x08003cc9
 8003ca0:	08003cdf 	.word	0x08003cdf
 8003ca4:	08003ccf 	.word	0x08003ccf
 8003ca8:	08003cdf 	.word	0x08003cdf
 8003cac:	08003cdf 	.word	0x08003cdf
 8003cb0:	08003cdf 	.word	0x08003cdf
 8003cb4:	08003cd7 	.word	0x08003cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb8:	f7fe f96e 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8003cbc:	6178      	str	r0, [r7, #20]
        break;
 8003cbe:	e013      	b.n	8003ce8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cc0:	f7fe f980 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8003cc4:	6178      	str	r0, [r7, #20]
        break;
 8003cc6:	e00f      	b.n	8003ce8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <UART_SetConfig+0x510>)
 8003cca:	617b      	str	r3, [r7, #20]
        break;
 8003ccc:	e00c      	b.n	8003ce8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cce:	f7fe f8cb 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8003cd2:	6178      	str	r0, [r7, #20]
        break;
 8003cd4:	e008      	b.n	8003ce8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cda:	617b      	str	r3, [r7, #20]
        break;
 8003cdc:	e004      	b.n	8003ce8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	76bb      	strb	r3, [r7, #26]
        break;
 8003ce6:	bf00      	nop
    }

    if (pclk != 0U)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d018      	beq.n	8003d20 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	085a      	lsrs	r2, r3, #1
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	441a      	add	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b0f      	cmp	r3, #15
 8003d08:	d908      	bls.n	8003d1c <UART_SetConfig+0x4f4>
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d204      	bcs.n	8003d1c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	e001      	b.n	8003d20 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d2c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3720      	adds	r7, #32
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bdb0      	pop	{r4, r5, r7, pc}
 8003d36:	bf00      	nop
 8003d38:	00f42400 	.word	0x00f42400

08003d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01a      	beq.n	8003e52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e3a:	d10a      	bne.n	8003e52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	605a      	str	r2, [r3, #4]
  }
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e90:	f7fc ff88 	bl	8000da4 <HAL_GetTick>
 8003e94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d10e      	bne.n	8003ec2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ea4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f82d 	bl	8003f12 <UART_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e023      	b.n	8003f0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d10e      	bne.n	8003eee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f817 	bl	8003f12 <UART_WaitOnFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e00d      	b.n	8003f0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	603b      	str	r3, [r7, #0]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f22:	e05e      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f2a:	d05a      	beq.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2c:	f7fc ff3a 	bl	8000da4 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d302      	bcc.n	8003f42 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d11b      	bne.n	8003f7a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f50:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0201 	bic.w	r2, r2, #1
 8003f60:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e043      	b.n	8004002 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02c      	beq.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f96:	d124      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fa0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fb0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e00f      	b.n	8004002 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69da      	ldr	r2, [r3, #28]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4013      	ands	r3, r2
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	bf0c      	ite	eq
 8003ff2:	2301      	moveq	r3, #1
 8003ff4:	2300      	movne	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d091      	beq.n	8003f24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <__libc_init_array>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	4d0d      	ldr	r5, [pc, #52]	; (8004044 <__libc_init_array+0x38>)
 8004010:	4c0d      	ldr	r4, [pc, #52]	; (8004048 <__libc_init_array+0x3c>)
 8004012:	1b64      	subs	r4, r4, r5
 8004014:	10a4      	asrs	r4, r4, #2
 8004016:	2600      	movs	r6, #0
 8004018:	42a6      	cmp	r6, r4
 800401a:	d109      	bne.n	8004030 <__libc_init_array+0x24>
 800401c:	4d0b      	ldr	r5, [pc, #44]	; (800404c <__libc_init_array+0x40>)
 800401e:	4c0c      	ldr	r4, [pc, #48]	; (8004050 <__libc_init_array+0x44>)
 8004020:	f000 f820 	bl	8004064 <_init>
 8004024:	1b64      	subs	r4, r4, r5
 8004026:	10a4      	asrs	r4, r4, #2
 8004028:	2600      	movs	r6, #0
 800402a:	42a6      	cmp	r6, r4
 800402c:	d105      	bne.n	800403a <__libc_init_array+0x2e>
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 8004030:	f855 3b04 	ldr.w	r3, [r5], #4
 8004034:	4798      	blx	r3
 8004036:	3601      	adds	r6, #1
 8004038:	e7ee      	b.n	8004018 <__libc_init_array+0xc>
 800403a:	f855 3b04 	ldr.w	r3, [r5], #4
 800403e:	4798      	blx	r3
 8004040:	3601      	adds	r6, #1
 8004042:	e7f2      	b.n	800402a <__libc_init_array+0x1e>
 8004044:	080040d4 	.word	0x080040d4
 8004048:	080040d4 	.word	0x080040d4
 800404c:	080040d4 	.word	0x080040d4
 8004050:	080040d8 	.word	0x080040d8

08004054 <memset>:
 8004054:	4402      	add	r2, r0
 8004056:	4603      	mov	r3, r0
 8004058:	4293      	cmp	r3, r2
 800405a:	d100      	bne.n	800405e <memset+0xa>
 800405c:	4770      	bx	lr
 800405e:	f803 1b01 	strb.w	r1, [r3], #1
 8004062:	e7f9      	b.n	8004058 <memset+0x4>

08004064 <_init>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr

08004070 <_fini>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	bf00      	nop
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr
